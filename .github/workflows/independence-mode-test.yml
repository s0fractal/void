name: Independence Mode Test

on:
  push:
    branches: [ main, fnpm-integration ]
    paths:
      - 'apps/void-dashboard/**'
      - 'apps/void-thinker/**'
      - 'void-independence-pack/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/void-dashboard/**'
      - 'apps/void-thinker/**'
      - 'void-independence-pack/**'

jobs:
  test-independence:
    name: Test Autonomous Operation
    runs-on: ubuntu-latest
    
    steps:
    - name: üåÄ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üåê Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: üì¶ Install Dependencies
      run: |
        # Install void-thinker dependencies
        cd apps/void-thinker
        npm install
        cd ../..
        
        # Install void-dashboard dependencies
        cd apps/void-dashboard
        npm install
        cd ../..
        
    - name: üß™ Test Rule Engine
      run: |
        echo "üîç Testing Rule Engine..."
        
        # Create a simple test for rule engine
        cat > test-rule-engine.js << 'EOF'
        import { RuleEngine } from './apps/void-dashboard/src/services/RuleEngine.js';
        
        const engine = new RuleEngine();
        engine.loadRules(RuleEngine.getDefaultRules());
        
        // Test substrate beat rule
        const beatEvent = {
          type: 'substrate',
          status: 'beat',
          meta: { k: 0.8 }
        };
        
        engine.processEvent(beatEvent).then(actions => {
          console.log('‚úÖ Rule Engine processed beat event:', actions.length, 'actions');
          process.exit(actions.length > 0 ? 0 : 1);
        }).catch(err => {
          console.error('‚ùå Rule Engine error:', err);
          process.exit(1);
        });
        EOF
        
        # Note: Would need to adjust imports for actual test
        echo "‚ÑπÔ∏è  Rule Engine test configured (would run with proper imports)"
        
    - name: ü§ñ Test void-thinker Brain
      run: |
        echo "üîç Testing void-thinker..."
        
        cd apps/void-thinker
        
        # Start void-thinker in background
        node server.js &
        THINKER_PID=$!
        
        # Wait for startup
        sleep 2
        
        # Test decision endpoint
        response=$(curl -s -X POST http://localhost:9090/think \
          -H "Content-Type: application/json" \
          -d '{"type":"substrate","status":"error","meta":{"error":"test"}}' || echo "FAILED")
        
        # Kill the server
        kill $THINKER_PID 2>/dev/null || true
        
        if [[ "$response" == *"decision"* ]]; then
          echo "‚úÖ void-thinker responded with decision"
          echo "Response: $response"
        else
          echo "‚ùå void-thinker failed to respond"
          exit 1
        fi
        
        cd ../..
        
    - name: üéØ Test Offline Bus
      run: |
        echo "üîç Testing Offline Bus persistence..."
        
        # Create a test for offline bus
        cat > test-offline-bus.js << 'EOF'
        // Test would verify:
        // 1. Events queued when offline
        // 2. Events flushed when online
        // 3. Persistence across restarts
        // 4. Heartbeat generation
        
        console.log('‚ÑπÔ∏è  Offline Bus test configured');
        EOF
        
        echo "‚úÖ Offline Bus test structure created"
        
    - name: üóΩ Verify Emergency Boot Script
      run: |
        echo "üîç Checking emergency boot script..."
        
        # Make script executable
        chmod +x void-independence-pack/scripts/emergency-boot.sh
        
        # Check script syntax
        bash -n void-independence-pack/scripts/emergency-boot.sh
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Emergency boot script is valid"
        else
          echo "‚ùå Emergency boot script has syntax errors"
          exit 1
        fi
        
        # Verify it sets required env vars
        if grep -q "INDEPENDENT_MODE=1" void-independence-pack/scripts/emergency-boot.sh; then
          echo "‚úÖ Sets INDEPENDENT_MODE flag"
        else
          echo "‚ùå Missing INDEPENDENT_MODE flag"
          exit 1
        fi
        
    - name: üìä Generate Independence Report
      if: always()
      run: |
        echo ""
        echo "üóΩ INDEPENDENCE MODE REPORT üóΩ"
        echo "==========================="
        echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        echo "Target: MN-1 by 2025-08-24"
        echo ""
        echo "Components:"
        echo "- Rule Engine: Event ‚Üí Action processing"
        echo "- Offline Bus: Local persistence"
        echo "- Guardian Router: Graceful degradation"
        echo "- void-thinker: Heuristic decisions"
        echo ""
        echo "The Void achieves independence through:"
        echo "1. Continuous heartbeat without guardians"
        echo "2. Local decision-making capabilities"
        echo "3. Event persistence across restarts"
        echo "4. Graceful network degradation"
        echo ""
        echo "üåü May the Void operate autonomously üåü"

  docker-build-test:
    name: Test Docker Independence Stack
    runs-on: ubuntu-latest
    
    steps:
    - name: üåÄ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üê≥ Test void-thinker Docker Build
      run: |
        echo "üî® Building void-thinker Docker image..."
        
        cd apps/void-thinker
        docker build -t void/void-thinker:test .
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ void-thinker Docker build successful"
        else
          echo "‚ùå void-thinker Docker build failed"
          exit 1
        fi
        
    - name: üéØ Test Independence Compose
      run: |
        echo "üîç Validating independence compose file..."
        
        if [ -f "void-independence-pack/compose/compose.independent.yml" ]; then
          docker compose -f void-independence-pack/compose/compose.independent.yml config > /dev/null
          if [ $? -eq 0 ]; then
            echo "‚úÖ Independence compose file is valid"
          else
            echo "‚ùå Independence compose file has errors"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è  Independence compose file not found"
        fi